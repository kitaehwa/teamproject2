<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.Init.mapper.MemberMapper">
	
	<!-- 시간정보 조회  -->
  	<select id="getTime" resultType="string">
  		select now()
  	</select>
  	
  	<!-- 사원 등록 -->
    <insert id="insertMember" parameterType="com.Init.domain.MemberVO">
        INSERT INTO employee (
            emp_id, emp_pw, emp_name, emp_birth, emp_gender, 
            emp_bnum, emp_dnum, emp_position, emp_job, 
            emp_salary, emp_work_type, emp_status, emp_start_date
        ) VALUES (
            #{emp_id}, #{emp_pw}, #{emp_name}, #{emp_birth}, #{emp_gender}, 
            #{emp_bnum}, #{emp_dnum}, #{emp_position}, #{emp_job}, 
            #{emp_salary}, #{emp_work_type}, #{emp_status}, #{emp_start_date}
        )
    </insert>

    <!-- 다음 사원 번호 시퀀스 가져오기 -->
    <select id="getNextEmployeeSequence" resultType="int">
        SELECT IFNULL(MAX(CAST(SUBSTRING(emp_id, 3) AS UNSIGNED)), 0) + 1
        FROM employee
        WHERE emp_id LIKE CONCAT(DATE_FORMAT(CURDATE(), '%y'), '%')
    </select>
	
	<!-- 로그인 체크 -->
  	<select id="loginMember" resultType="MemberVO">
  		select * from employee 
  		where emp_id=#{emp_id} 
  		and emp_pw=#{emp_pw}
  	</select>
  	
  	<!-- 회원정보 조회 -->
  	<select id="getMember" resultType="MemberVO">
  		select * from employee
  		where emp_id=#{emp_id}
  	</select>
  	
  	<!-- 회원 정보 수정 -->
	<update id="updateMember">
	    update employee 
	    set emp_name=#{emp_name}, emp_birth=#{emp_birth}, emp_gender=#{emp_gender}, emp_tel=#{emp_tel}, emp_email=#{emp_email}, 
	    emp_addr=#{emp_addr}, emp_dnum=#{emp_dnum}, emp_position=#{emp_position}, emp_job=#{emp_job}, emp_status=#{emp_status}, emp_bnum=#{emp_bnum}, 
		emp_work_type=#{emp_work_type}, emp_bank_name=#{emp_bank_name}, emp_account_num=#{emp_account_num}, emp_account_name=#{emp_account_name}, 
		emp_start_date=#{emp_start_date}, emp_salary=#{emp_salary}, emp_break_date=#{emp_break_date}, emp_restart_date=#{emp_restart_date},	emp_quit_date=#{emp_quit_date}    
	     
	    where emp_id=#{emp_id}
	</update>

	<!-- 수정 이력 추가 -->
	<insert id="insertHisMember">
	    insert into his_employee (id, pw, name, birth, gender, tel, email, addr, dnum, position, job, status, bnum,
	    work_type, bank_name, account_num, account_name, salary, start_date, break_date, restart_date, quit_date, update_date)
	    values (#{emp_id}, #{emp_pw}, #{emp_name}, #{emp_birth}, #{emp_gender}, #{emp_tel}, #{emp_email}, #{emp_addr}, #{emp_dnum}, #{emp_position}, #{emp_job}, #{emp_status}, 
	    #{emp_bnum}, #{emp_work_type}, #{emp_bank_name}, #{emp_account_num}, #{emp_account_name}, #{emp_salary}, #{emp_start_date}, #{emp_break_date}, #{emp_restart_date}, #{emp_quit_date}, now())
	</insert>
	
	<!-- 관리자 수정 -->
    <update id="updateEmployee" parameterType="MemberVO">
        UPDATE employee
        SET emp_name = #{emp_name},
            emp_birth = #{emp_birth},
            emp_gender = #{emp_gender},
            emp_tel = #{emp_tel},
            emp_email = #{emp_email},
            emp_addr = #{emp_addr},
            emp_bnum = #{emp_bnum},
            emp_dnum = #{emp_dnum},
            emp_position = #{emp_position},
            emp_job = #{emp_job},
            emp_salary = #{emp_salary},
            emp_work_type = #{emp_work_type},
            emp_status = #{emp_status},
            emp_start_date = #{emp_start_date},
            emp_break_date = #{emp_break_date},
            emp_restart_date = #{emp_restart_date},
            emp_quit_date = #{emp_quit_date}
        WHERE emp_id = #{emp_id}
    </update>

    <insert id="insertEmployeeHistory" parameterType="MemberVO">
        INSERT INTO his_employee (
            id, name, birth, gender, tel, email, addr,
            bnum, dnum, position, job, salary, work_type,
            status, start_date, break_date, restart_date, quit_date,
            update_date
        ) VALUES (
            #{emp_id}, #{emp_name}, #{emp_birth}, #{emp_gender}, #{emp_tel}, #{emp_email}, #{emp_addr},
            #{emp_bnum}, #{emp_dnum}, #{emp_position}, #{emp_job}, #{emp_salary}, #{emp_work_type},
            #{emp_status}, #{emp_start_date}, #{emp_break_date}, #{emp_restart_date}, #{emp_quit_date},
            NOW()
        )
    </insert>
	
	<!-- 비밀번호 수정 -->
	<update id="updatePassword">
        UPDATE employee SET emp_pw = #{emp_pw} WHERE emp_id = #{emp_id}
    </update>
  	
  	<!-- 회원정보 삭제  -->
  	<delete id="deleteMember">
  		delete from employee
  		where emp_id=#{emp_id} and emp_pw=#{emp_pw} 
  	
  	</delete>
  	
  	<!-- 회원정보 목록조회 -->
  	<select id="getMemberList" resultType="MemberVO">
  		select * from employee
  	</select>
  	
  	<!-- 계좌 정보 조회 -->
    <select id="getAccount" parameterType="String" resultType="AccountVO">
        SELECT emp_account_name, emp_account_num, emp_bank_name
        FROM employee
        WHERE emp_id = #{emp_id}
    </select>

    <!-- 자격증 정보 조회 -->
    <select id="getEmpLicense" parameterType="String" resultType="LicenseVO">
        SELECT ll.li_id, ll.li_name, ll.li_issu, l.li_date
        FROM li_list ll
        JOIN license l ON ll.li_id = l.li_id
        WHERE l.emp_id = #{emp_id}
    </select>
    
    <!-- 자격증 추가 -->
    <select id="getLicenseList" resultType="map">
        SELECT li_id, li_name, li_issu
        FROM li_list
    </select>

    <insert id="addLicense" parameterType="LicenseVO">
        INSERT INTO license (li_id, emp_id, li_date)
        VALUES (#{li_id}, #{emp_id}, #{li_date})
    </insert>

    <delete id="deleteLicense" parameterType="map">
        DELETE FROM license
        WHERE li_id = #{licenseId} AND emp_id = #{emp_id}
    </delete>

    <!-- 교육이력 정보 조회 -->
    <select id="getHis_edu" parameterType="String" resultType="His_eduVO">
        SELECT his_edu.emp_id, his_edu.edu_complete_date, his_edu.edu_status, 
        	   edu_list.edu_name, edu_list.edu_teacher
        FROM his_edu JOIN edu_list 
        ON his_edu.edu_id = edu_list.edu_id
        WHERE his_edu.emp_id = #{emp_id}
    </select>
	

    <!-- 포상/징계 정보 조회 -->
    <select id="getReward" parameterType="String" resultType="RewardVO">
        SELECT rid, division, rname, reason, rdate
        FROM reward
        WHERE emp_id = #{emp_id}
    </select>

    <!-- 인사평가 정보 조회 -->
    <select id="getEval" parameterType="String" resultType="EvalVO">
        SELECT eval_name, score1, score2, score3, total, feedback, valuator, eval_date
        FROM eval
        WHERE emp_id = #{emp_id}
    </select>
    
    <!-- 프로필 사진 업데이트 -->
    <update id="updateProfilePicture" parameterType="MemberVO">
        UPDATE employee
        SET emp_profile = #{emp_profile}
        WHERE emp_id = #{emp_id}
    </update>
    
    <!-- 계좌 정보 업데이트 -->
    <update id="updateAccount" parameterType="MemberVO">
        UPDATE employee
        SET emp_account_name = #{emp_account_name},
            emp_account_num = #{emp_account_num},
            emp_bank_name = #{emp_bank_name}
        WHERE emp_id = #{emp_id}
    </update>
    
    <!-- 회원 정보 조회  -->
    <select id="getPaginatedMembers" parameterType="map" resultType="MemberVO">
        SELECT * FROM employee
        ORDER BY emp_id
        LIMIT #{offset}, #{pageSize}
    </select>
    
    <select id="getTotalMembersCount" resultType="int">
        SELECT COUNT(*) FROM employee
    </select>

    <select id="getMemberDetail" resultType="MemberVO" parameterType="String">
        SELECT * FROM employee WHERE emp_id = #{emp_id}
    </select>
    
    <!-- 조직도 -->
    <select id="getAllMembers" resultType="MemberVO">
        SELECT * FROM employee ORDER BY emp_dnum, emp_position
    </select>
    
	<select id="getBranchList" resultType="String">
   		SELECT DISTINCT emp_bnum FROM employee ORDER BY emp_bnum
	</select>
	
	<select id="getTeamMembers" resultType="MemberVO">
	    SELECT * FROM employee 
	    WHERE emp_dnum = #{emp_dnum}
	    ORDER BY emp_position
	</select>
	
	<!-- 조직도 페이지  -->
	<select id="getAllMemPage" resultType="MemberVO">
        SELECT * FROM employee ORDER BY emp_bnum, emp_dnum, emp_position
    </select>

    <select id="getTeamMemPage" parameterType="string" resultType="MemberVO">
        SELECT * FROM employee WHERE emp_dnum = #{deptId} AND emp_job != '부서장' ORDER BY emp_position
    </select>
    
    <select id="getFilterOptions" parameterType="string" resultType="string">
    SELECT DISTINCT 
    <choose>
        <when test="_parameter == 'emp_dnum'">emp_dnum</when>
        <when test="_parameter == 'emp_bnum'">emp_bnum</when>
        <when test="_parameter == 'emp_position'">emp_position</when>
        <when test="_parameter == 'emp_job'">emp_job</when>
        <when test="_parameter == 'emp_status'">emp_status</when>
    </choose>
    FROM employee
    ORDER BY 
    <choose>
        <when test="_parameter == 'emp_dnum'">emp_dnum</when>
        <when test="_parameter == 'emp_bnum'">emp_bnum</when>
        <when test="_parameter == 'emp_position'">emp_position</when>
        <when test="_parameter == 'emp_job'">emp_job</when>
        <when test="_parameter == 'emp_status'">emp_status</when>
    </choose>
	</select>

	<!-- 필터링된 회원 목록 가져오기 -->
	<select id="getFilteredMembers" parameterType="map" resultType="MemberVO">
	    SELECT * FROM employee
	    <where>
	        <if test="filterType != null and filterValue != null">
	            ${filterType} = #{filterValue}
	        </if>
	    </where>
	    ORDER BY emp_id
	    LIMIT #{offset}, #{pageSize}
	</select>
	
	<!-- 필터링된 회원 수 가져오기 -->
	<select id="getFilteredMembersCount" parameterType="map" resultType="int">
	    SELECT COUNT(*) FROM employee
	    <where>
	        <if test="filterType != null and filterValue != null">
	            ${filterType} = #{filterValue}
	        </if>
	    </where>
	</select>
	
	<!-- 검색기능 -->
	<select id="searchMembers" parameterType="map" resultType="MemberVO">
        SELECT * FROM employee
        <where>
            <if test="searchType == 'emp_id'">
                emp_id LIKE #{keyword}
            </if>
            <if test="searchType == 'emp_name'">
                emp_name LIKE #{keyword}
            </if>
            <if test="searchType == 'emp_dnum'">
                emp_dnum LIKE #{keyword}
            </if>
            <if test="searchType == 'emp_position'">
                emp_position LIKE #{keyword}
            </if>
            <if test="searchType == 'emp_job'">
                emp_job LIKE #{keyword}
            </if>
        </where>
        ORDER BY emp_id
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="getSearchMembersCount" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM employee
        <where>
            <if test="searchType == 'emp_id'">
                emp_id LIKE #{keyword}
            </if>
            <if test="searchType == 'emp_name'">
                emp_name LIKE #{keyword}
            </if>
            <if test="searchType == 'emp_dnum'">
                emp_dnum LIKE #{keyword}
            </if>
            <if test="searchType == 'emp_position'">
                emp_position LIKE #{keyword}
            </if>
            <if test="searchType == 'emp_job'">
                emp_job LIKE #{keyword}
            </if>
        </where>
    </select>
	
</mapper>